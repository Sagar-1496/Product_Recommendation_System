# -*- coding: utf-8 -*-
"""Flipkart_Product_Recommendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1klaLKD5SAZn3e409Kzp4TPPpGWVOENPk
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import nltk

df_train = pd.read_csv("/content/train.csv")

df_train.head()

df_train.shape

df_train.isnull().sum()

# Forward fill null values in 'maincateg' column
df_train['maincateg'].fillna(method='ffill', inplace=True)

remove = ['norating1', 'noreviews1', 'star_5f', 'star_4f', 'star_3f']
# Drop specified columns
df_train.drop(columns = remove, inplace=True)

df_train.isnull().sum()

from nltk.stem.snowball import SnowballStemmer
def tokenize_stem(text):
    ps = SnowballStemmer('english')
    tokens = nltk.word_tokenize(text)
    stemmed_tokens = [ps.stem(token) for token in tokens]
    return stemmed_tokens

nltk.download('punkt')
df_train['stemmed_tokens'] = df_train['title'].apply(tokenize_stem)
#df_train['stemmed_tokens'] = df_train.apply(lambda row:tokenize_stem(row['title']))

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
tfidfv = TfidfVectorizer(tokenizer=tokenize_stem)

def cosine_sim(txt1,txt2):
    matrix = tfidfv.fit_transform([txt1,txt2])
    return cosine_similarity(matrix)

def search_product(query):
    stemmed_query = tokenize_stem(query)
     # Compute cosine similarity between query and each product title
    df_train['similarity'] = df_train['stemmed_tokens'].apply(lambda x: cosine_sim(' '.join(stemmed_query), ' '.join(x))[0][0])
     # Weight the similarity by ratings
    df_train['weighted_similarity'] = df_train['similarity'] * df_train['Rating']
    res = df_train.sort_values(by=['similarity'], ascending=False).head(10)[['title', 'Rating']]
    return res

df_train.head()

df_train.columns

df_train['title'][5]

search_product('Women Pink Flats Sandal')